<?php

class SecurityValidator
{
    private const MAX_REQUEST_SIZE = 1048576; // 1MB
    private const MAX_INPUT_LENGTH = 1000;
    private const RATE_LIMIT_REQUESTS = 10;
    private const RATE_LIMIT_WINDOW = 300; // 5 minutes

    private array $suspiciousPatterns = [
        '/script\s*>/i',
        '/<\s*script/i',
        '/javascript:/i',
        '/on\w+\s*=/i',
        '/\beval\s*\(/i',
        '/\bunion\s+select/i',
        '/\bselect\s+.*\bfrom/i',
        '/\binsert\s+into/i',
        '/\bdelete\s+from/i',
        '/\bdrop\s+table/i'
    ];

    public function validateRequest(array $postData, array $serverData): void
    {
        $this->checkRateLimit();
        $this->validateRequestSize($serverData);
        $this->validateInputData($postData);
        $this->checkSuspiciousActivity($postData, $serverData);
    }

    private function checkRateLimit(): void
    {
        $ip = $this->getClientIP();
        $key = "rate_limit_{$ip}";
        
        if (!isset($_SESSION[$key])) {
            $_SESSION[$key] = ['count' => 0, 'window_start' => time()];
        }

        $rateData = $_SESSION[$key];
        $currentTime = time();

        // Reset window if expired
        if ($currentTime - $rateData['window_start'] > self::RATE_LIMIT_WINDOW) {
            $_SESSION[$key] = ['count' => 1, 'window_start' => $currentTime];
            return;
        }

        $_SESSION[$key]['count']++;

        if ($_SESSION[$key]['count'] > self::RATE_LIMIT_REQUESTS) {
            Logger::security('Rate limit exceeded', [
                'ip' => $ip,
                'requests' => $_SESSION[$key]['count']
            ]);
            throw new SecurityException('Rate limit exceeded. Please try again later.');
        }
    }

    private function validateRequestSize(array $serverData): void
    {
        $contentLength = (int)($serverData['CONTENT_LENGTH'] ?? 0);
        if ($contentLength > self::MAX_REQUEST_SIZE) {
            Logger::security('Request size exceeded limit', [
                'content_length' => $contentLength,
                'max_allowed' => self::MAX_REQUEST_SIZE
            ]);
            throw new SecurityException('Request too large.');
        }
    }

    private function validateInputData(array $data): void
    {
        foreach ($data as $key => $value) {
            if (is_string($value)) {
                // Check input length
                if (strlen($value) > self::MAX_INPUT_LENGTH) {
                    Logger::security('Input length exceeded', [
                        'field' => $key,
                        'length' => strlen($value)
                    ]);
                    throw new SecurityException('Input data too long.');
                }

                // Check for malicious patterns
                $this->checkMaliciousPatterns($key, $value);
            }
        }
    }

    private function checkMaliciousPatterns(string $field, string $value): void
    {
        foreach ($this->suspiciousPatterns as $pattern) {
            if (preg_match($pattern, $value)) {
                Logger::security('Malicious pattern detected', [
                    'field' => $field,
                    'pattern' => $pattern,
                    'value' => substr($value, 0, 100) // Log only first 100 chars
                ]);
                throw new SecurityException('Suspicious input detected.');
            }
        }
    }

    private function checkSuspiciousActivity(array $postData, array $serverData): void
    {
        // Check for empty user agent
        if (empty($serverData['HTTP_USER_AGENT'])) {
            Logger::security('Empty user agent detected');
        }

        // Check for suspicious referrer
        $referrer = $serverData['HTTP_REFERER'] ?? '';
        if (!empty($referrer) && !$this->isValidReferrer($referrer)) {
            Logger::security('Suspicious referrer', ['referrer' => $referrer]);
        }

        // Check for bot-like behavior
        $userAgent = $serverData['HTTP_USER_AGENT'] ?? '';
        if ($this->isSuspiciousUserAgent($userAgent)) {
            Logger::security('Suspicious user agent', ['user_agent' => $userAgent]);
        }
    }

    private function isValidReferrer(string $referrer): bool
    {
        $allowedDomains = [
            parse_url(BASEURL, PHP_URL_HOST),
            'localhost',
            '127.0.0.1'
        ];

        $referrerHost = parse_url($referrer, PHP_URL_HOST);
        return in_array($referrerHost, $allowedDomains, true);
    }

    private function isSuspiciousUserAgent(string $userAgent): bool
    {
        $suspiciousAgents = [
            'bot', 'crawler', 'spider', 'scraper', 'curl', 'wget',
            'python', 'perl', 'java/', 'scanner'
        ];

        $lowerAgent = strtolower($userAgent);
        foreach ($suspiciousAgents as $agent) {
            if (strpos($lowerAgent, $agent) !== false) {
                return true;
            }
        }

        return false;
    }

    private function getClientIP(): string
    {
        foreach (['HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR'] as $key) {
            if (!empty($_SERVER[$key])) {
                $ip = trim(explode(',', $_SERVER[$key])[0]);
                if (filter_var($ip, FILTER_VALIDATE_IP)) {
                    return $ip;
                }
            }
        }
        return 'UNKNOWN';
    }
}

<?php

class SecurityException extends Exception
{
    private array $context;
    private string $securityLevel;

    public function __construct(
        string $message = "",
        int $code = 0,
        ?Throwable $previous = null,
        array $context = [],
        string $securityLevel = 'HIGH'
    ) {
        parent::__construct($message, $code, $previous);
        $this->context = $context;
        $this->securityLevel = $securityLevel;
    }

    public function getContext(): array
    {
        return $this->context;
    }

    public function getSecurityLevel(): string
    {
        return $this->securityLevel;
    }

    public function logSecurityEvent(): void
    {
        Logger::security('Security Exception: ' . $this->getMessage(), [
            'exception_class' => get_class($this),
            'security_level' => $this->securityLevel,
            'context' => $this->context,
            'trace' => $this->getTraceAsString()
        ]);
    }
}

<?php

class AuthService
{
    private User_model $userModel;
    private InputValidator $inputValidator;

    public function __construct(User_model $userModel)
    {
        $this->userModel = $userModel;
        $this->inputValidator = new InputValidator();
        
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
    }

    public function processLogin(array $postData): array
    {
        if (Captcha::isBlocked()) {
            $remaining = Captcha::getRemainingCooldown();
            $minutes = ceil($remaining / 60);
            Logger::warning('Login attempt blocked due to CAPTCHA rate limit.');
            return [
                'success' => false,
                'message' => "Terlalu banyak percobaan. Tunggu {$minutes} menit.",
                'redirect' => BASEURL . '/auth/login'
            ];
        }

        // Validate CSRF token
        if (!$this->validateCSRFToken($postData)) {
            Logger::warning('Login failed - Invalid CSRF token.');
            return [
                'success' => false,
                'message' => 'Sesi tidak valid atau kedaluwarsa. Silakan coba lagi.',
                'redirect' => BASEURL . '/auth/login'
            ];
        }

        // Validate and sanitize input
        $credentials = $this->inputValidator->validateLoginInput($postData);
        if (!$credentials['valid']) {
            Logger::warning('Login failed - Invalid input data.');
            return [
                'success' => false,
                'message' => $credentials['message'],
                'redirect' => BASEURL . '/auth/login'
            ];
        }

        // Validate CAPTCHA
        if (!Captcha::validateCaptcha($credentials['captcha_answer'])) {
            Logger::warning('Login failed - Invalid CAPTCHA.', [
                'username' => $credentials['username']
            ]);
            return [
                'success' => false,
                'message' => 'Verifikasi keamanan gagal!',
                'redirect' => BASEURL . '/auth/login'
            ];
        }

        // Attempt authentication
        Logger::activity('Login attempt', ['username' => $credentials['username']]);
        $user = $this->userModel->getUserByUsername($credentials['username']);

        if ($user && password_verify($credentials['password'], $user['password'])) {
            Logger::info('User logged in successfully.', [
                'user_id' => $user['id_user'],
                'username' => $user['username']
            ]);
            
            return [
                'success' => true,
                'message' => 'Selamat datang, ' . htmlspecialchars($user['username'], ENT_QUOTES, 'UTF-8') . '!',
                'redirect' => BASEURL . '/',
                'user' => $user
            ];
        }

        Logger::warning('Login failed - Invalid credentials.', [
            'username' => $credentials['username']
        ]);
        
        return [
            'success' => false,
            'message' => 'Username atau password salah!',
            'redirect' => BASEURL . '/auth/login'
        ];
    }

    public function processRegistration(array $postData): array
    {
        // Validate CSRF token
        if (!$this->validateCSRFToken($postData)) {
            Logger::warning('Registration failed - Invalid CSRF token.');
            return [
                'success' => false,
                'message' => 'Sesi tidak valid. Coba lagi.',
                'redirect' => BASEURL . '/auth/register'
            ];
        }

        // Validate CAPTCHA
        if (!Captcha::validateCaptcha($postData['captcha_answer'] ?? '')) {
            Logger::warning('Registration failed - Invalid CAPTCHA.');
            return [
                'success' => false,
                'message' => 'Verifikasi keamanan gagal!',
                'redirect' => BASEURL . '/auth/register'
            ];
        }

        // Validate and sanitize input
        $userData = $this->inputValidator->validateRegistrationInput($postData);
        if (!$userData['valid']) {
            return [
                'success' => false,
                'message' => $userData['message'],
                'redirect' => BASEURL . '/auth/register'
            ];
        }

        // Check if username already exists
        if ($this->userModel->getUserByUsername($userData['username'])) {
            return [
                'success' => false,
                'message' => 'Username sudah ada.',
                'redirect' => BASEURL . '/auth/register'
            ];
        }

        // Create user
        $hashedPassword = password_hash($userData['password'], PASSWORD_DEFAULT);
        $profilePic = 'https://ui-avatars.com/api/?name=' . urlencode($userData['name']) . '&background=random&color=fff&font-size=0.5';

        $newUser = [
            'username' => $userData['username'],
            'name' => $userData['name'],
            'email' => $userData['email'],
            'password' => $hashedPassword,
            'profile_picture_url' => $profilePic
        ];

        if ($this->userModel->createUser($newUser) > 0) {
            Logger::info('User registered.', ['username' => $userData['username']]);
            return [
                'success' => true,
                'message' => 'Registrasi berhasil! Silakan login.',
                'redirect' => BASEURL . '/auth/login'
            ];
        }

        Logger::error('Registration db error.', ['username' => $userData['username']]);
        return [
            'success' => false,
            'message' => 'Registrasi gagal. Coba lagi nanti.',
            'redirect' => BASEURL . '/auth/register'
        ];
    }

    private function validateCSRFToken(array $postData): bool
    {
        return isset($postData['csrf_token']) && Helper::validateCSRFToken($postData['csrf_token']);
    }
}

<?php

class InputValidator
{
    private const MIN_PASSWORD_LENGTH = 8;
    private const MAX_USERNAME_LENGTH = 50;
    private const MAX_NAME_LENGTH = 100;
    private const MAX_EMAIL_LENGTH = 100;

    public function validateLoginInput(array $data): array
    {
        $username = trim($data['username'] ?? '');
        $password = trim($data['password'] ?? '');
        $captchaAnswer = trim($data['captcha_answer'] ?? '');

        // Check required fields
        if (empty($username) || empty($password) || empty($captchaAnswer)) {
            return [
                'valid' => false,
                'message' => 'Semua field wajib diisi!'
            ];
        }

        // Validate username length
        if (strlen($username) > self::MAX_USERNAME_LENGTH) {
            return [
                'valid' => false,
                'message' => 'Username terlalu panjang!'
            ];
        }

        // Sanitize username
        $sanitizedUsername = $this->sanitizeInput($username);
        if ($sanitizedUsername !== $username) {
            Logger::warning('Username contains suspicious characters', [
                'original' => $username,
                'sanitized' => $sanitizedUsername
            ]);
        }

        return [
            'valid' => true,
            'username' => htmlspecialchars($sanitizedUsername, ENT_QUOTES, 'UTF-8'),
            'password' => $password,
            'captcha_answer' => $captchaAnswer
        ];
    }

    public function validateRegistrationInput(array $data): array
    {
        $username = trim($data['username'] ?? '');
        $name = trim($data['name'] ?? '');
        $email = trim($data['email'] ?? '');
        $password = $data['password'] ?? '';
        $confirmPassword = $data['confirm_password'] ?? '';

        // Check required fields
        if (empty($username) || empty($name) || empty($email) || empty($password) || empty($confirmPassword)) {
            return [
                'valid' => false,
                'message' => 'Semua field wajib diisi!'
            ];
        }

        // Validate username
        if (!$this->isValidUsername($username)) {
            return [
                'valid' => false,
                'message' => 'Username hanya boleh mengandung huruf, angka, dan underscore!'
            ];
        }

        if (strlen($username) > self::MAX_USERNAME_LENGTH) {
            return [
                'valid' => false,
                'message' => 'Username terlalu panjang!'
            ];
        }

        // Validate name
        if (strlen($name) > self::MAX_NAME_LENGTH) {
            return [
                'valid' => false,
                'message' => 'Nama terlalu panjang!'
            ];
        }

        // Validate email
        $sanitizedEmail = filter_var($email, FILTER_SANITIZE_EMAIL);
        if (!filter_var($sanitizedEmail, FILTER_VALIDATE_EMAIL)) {
            return [
                'valid' => false,
                'message' => 'Email tidak valid!'
            ];
        }

        if (strlen($sanitizedEmail) > self::MAX_EMAIL_LENGTH) {
            return [
                'valid' => false,
                'message' => 'Email terlalu panjang!'
            ];
        }

        // Validate password
        if (strlen($password) < self::MIN_PASSWORD_LENGTH) {
            return [
                'valid' => false,
                'message' => 'Password minimal ' . self::MIN_PASSWORD_LENGTH . ' karakter!'
            ];
        }

        if ($password !== $confirmPassword) {
            return [
                'valid' => false,
                'message' => 'Password tidak cocok!'
            ];
        }

        // Check password strength
        if (!$this->isStrongPassword($password)) {
            return [
                'valid' => false,
                'message' => 'Password harus mengandung huruf besar, huruf kecil, dan angka!'
            ];
        }

        return [
            'valid' => true,
            'username' => htmlspecialchars($this->sanitizeInput($username), ENT_QUOTES, 'UTF-8'),
            'name' => htmlspecialchars($this->sanitizeInput($name), ENT_QUOTES, 'UTF-8'),
            'email' => $sanitizedEmail,
            'password' => $password
        ];
    }

    private function isValidUsername(string $username): bool
    {
        return preg_match('/^[a-zA-Z0-9_]+$/', $username) === 1;
    }

    private function isStrongPassword(string $password): bool
    {
        return preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/', $password) === 1;
    }

    private function sanitizeInput(string $input): string
    {
        // Remove control characters
        $sanitized = preg_replace('/[\x00-\x1F\x7F]/u', '', $input);
        
        // Remove potential XSS characters
        $sanitized = str_replace(['<', '>', '"', "'", '&'], '', $sanitized);
        
        return trim($sanitized);
    }
}